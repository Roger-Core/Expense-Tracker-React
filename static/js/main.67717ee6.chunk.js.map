{"version":3,"sources":["Components/Header.jsx","Context/AppReducer.js","Context/GlobalState.js","Components/Balance.jsx","Components/IncomeExpense.jsx","Components/Transaction.jsx","Components/TransactionList.jsx","Components/AddTransaction.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","state","action","type","transactions","filter","id","payload","initialState","text","amount","GlobalContext","createContext","GlobalProvider","children","useReducer","AppReducer","dispatch","Provider","value","deleteTransaction","addTransaction","transaction","Balance","total","useContext","map","reduce","acc","item","toFixed","IncomeExpense","amounts","Income","Expense","className","Transaction","sign","Math","abs","onClick","TransactionList","key","AddTransaction","useState","setText","setAmount","onSubmit","e","preventDefault","newTransaction","floor","random","htmlFor","onChange","target","placeholder","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.67717ee6.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst Header = () => {\r\n  return (\r\n    <div>\r\n      <h2>Expense Tracker</h2>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","export default (state, action) => {\r\n  switch (action.type) {\r\n    case \"DELETE_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: state.transactions.filter(\r\n          (transactions) => transactions.id !== action.payload\r\n        ),\r\n      };\r\n    case \"ADD_TRANSACTION\":\r\n      return {\r\n        ...state,\r\n        transactions: [action.payload, ...state.transactions],\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n","import React, { createContext, useReducer } from \"react\";\r\nimport AppReducer from \"./AppReducer\";\r\n\r\nconst initialState = {\r\n  transactions: [\r\n    { id: 1, text: \"Flower\", amount: -20 },\r\n    { id: 2, text: \"Salary\", amount: 300 },\r\n    { id: 3, text: \"Book\", amount: -10 },\r\n    { id: 4, text: \"Camera\", amount: 150 },\r\n    { id: 5, text: \"Movie\", amount: -25 },\r\n    { id: 6, text: \"Coffee\", amount: -5 },\r\n  ],\r\n};\r\n\r\nexport const GlobalContext = createContext(initialState);\r\n\r\nexport const GlobalProvider = ({ children }) => {\r\n  const [state, dispatch] = useReducer(AppReducer, initialState);\r\n\r\n  function deleteTransaction(id) {\r\n    dispatch({\r\n      type: \"DELETE_TRANSACTION\",\r\n      payload: id,\r\n    });\r\n  }\r\n\r\n  function addTransaction(transaction) {\r\n    dispatch({\r\n      type: \"ADD_TRANSACTION\",\r\n      payload: transaction,\r\n    });\r\n  }\r\n\r\n  return (\r\n    <GlobalContext.Provider\r\n      value={{\r\n        transactions: state.transactions,\r\n        deleteTransaction,\r\n        addTransaction,\r\n      }}\r\n    >\r\n      {children}\r\n    </GlobalContext.Provider>\r\n  );\r\n};\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../Context/GlobalState\";\r\n\r\nconst Balance = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((transaction) => transaction.amount);\r\n  const total = amounts.reduce((acc, item) => (acc += item), 0).toFixed(2);\r\n\r\n  return (\r\n    <>\r\n      <h4>Your Balance</h4>\r\n      <h1>${total}</h1>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Balance;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../Context/GlobalState\";\r\n\r\nconst IncomeExpense = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  const amounts = transactions.map((transaction) => transaction.amount);\r\n\r\n  const Income = amounts\r\n    .filter((item) => item > 0)\r\n    .reduce((acc, item) => (acc += item), 0)\r\n    .toFixed(2);\r\n\r\n  const Expense = (\r\n    amounts.filter((item) => item < 0).reduce((acc, item) => (acc += item), 0) *\r\n    -1\r\n  ).toFixed(2);\r\n\r\n  return (\r\n    <div className=\"inc-exp-container\">\r\n      <h4>Income</h4>\r\n      <p className=\"money plus\">{Income}</p>\r\n      <div>\r\n        <h4>Expense</h4>\r\n        <p className=\"money minus\">{Expense}</p>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default IncomeExpense;\r\n","import React, { useContext } from \"react\";\r\nimport { GlobalContext } from \"../Context/GlobalState\";\r\n\r\nconst Transaction = ({ transactions }) => {\r\n  const { deleteTransaction } = useContext(GlobalContext);\r\n\r\n  const sign = transactions.amount < 0 ? \"-\" : \"+\";\r\n\r\n  return (\r\n    <div>\r\n      <li className={transactions.amount < 0 ? \"minus\" : \"plus\"}>\r\n        {transactions.text}\r\n        <span>\r\n          {sign}${Math.abs(transactions.amount)}\r\n        </span>\r\n        <button\r\n          onClick={() => deleteTransaction(transactions.id)}\r\n          className=\"delete-btn\"\r\n        >\r\n          X\r\n        </button>\r\n      </li>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Transaction;\r\n","import React, { useContext } from \"react\";\r\nimport Transaction from \"./Transaction\";\r\n\r\nimport { GlobalContext } from \"../Context/GlobalState\";\r\n\r\nconst TransactionList = () => {\r\n  const { transactions } = useContext(GlobalContext);\r\n\r\n  return (\r\n    <>\r\n      <h3>History</h3>\r\n      <ul className=\"list\">\r\n        {transactions.map((transactions) => (\r\n          <Transaction key={transactions.id} transactions={transactions} />\r\n        ))}\r\n      </ul>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default TransactionList;\r\n","import React, { useState, useContext } from \"react\";\r\nimport { GlobalContext } from \"../Context/GlobalState\";\r\n\r\nconst AddTransaction = () => {\r\n  const [text, setText] = useState(\"\");\r\n  const [amount, setAmount] = useState(0);\r\n\r\n  const { addTransaction } = useContext(GlobalContext);\r\n\r\n  const onSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const newTransaction = {\r\n      id: Math.floor(Math.random() * 100000),\r\n      text,\r\n      amount: +amount,\r\n    };\r\n\r\n    addTransaction(newTransaction);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <h3>Add new transaction</h3>\r\n      <form onSubmit={onSubmit}>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"text\">Text</label>\r\n          <input\r\n            type=\"text\"\r\n            value={text}\r\n            onChange={(e) => setText(e.target.value)}\r\n            placeholder=\"Enter Text...\"\r\n          />\r\n        </div>\r\n        <div className=\"form-control\">\r\n          <label htmlFor=\"amount\">\r\n            Amount <br />\r\n            (negative - expense, positive - income)\r\n          </label>\r\n          <input\r\n            type=\"number\"\r\n            value={amount}\r\n            onChange={(e) => setAmount(e.target.value)}\r\n            placeholder=\"Enter amount\"\r\n          />\r\n        </div>\r\n        <button className=\"btn\">Add Transaction</button>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default AddTransaction;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport Header from \"./Components/Header\";\nimport Balance from \"./Components/Balance\";\nimport IncomeExpense from \"./Components/IncomeExpense\";\nimport TransactionList from \"./Components/TransactionList\";\nimport AddTransaction from \"./Components/AddTransaction\";\nimport { GlobalProvider } from \"./Context/GlobalState\";\n\nconst App = () => {\n  return (\n    <GlobalProvider>\n      <div className=\"App\">\n        <Header />\n        <div className=\"container\">\n          <Balance />\n          <IncomeExpense />\n          <TransactionList />\n          <AddTransaction />\n        </div>\n      </div>\n    </GlobalProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}